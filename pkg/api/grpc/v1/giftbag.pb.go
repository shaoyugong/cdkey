// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/proto/giftbag.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 兑换码长度
type CodeLen int32

const (
	CodeLen_AllType CodeLen = 0
	CodeLen_Short   CodeLen = 8
	CodeLen_Normal  CodeLen = 10
	CodeLen_Long    CodeLen = 12
)

var CodeLen_name = map[int32]string{
	0:  "AllType",
	8:  "Short",
	10: "Normal",
	12: "Long",
}

var CodeLen_value = map[string]int32{
	"AllType": 0,
	"Short":   8,
	"Normal":  10,
	"Long":    12,
}

func (x CodeLen) String() string {
	return proto.EnumName(CodeLen_name, int32(x))
}

func (CodeLen) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c07203a33ae7775, []int{0}
}

// 礼包状态
type BagState int32

const (
	BagState_Working   BagState = 0
	BagState_Producing BagState = 1
	BagState_Stoping   BagState = 2
)

var BagState_name = map[int32]string{
	0: "Working",
	1: "Producing",
	2: "Stoping",
}

var BagState_value = map[string]int32{
	"Working":   0,
	"Producing": 1,
	"Stoping":   2,
}

func (x BagState) String() string {
	return proto.EnumName(BagState_name, int32(x))
}

func (BagState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c07203a33ae7775, []int{1}
}

// 礼包
type GiftGag struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Lenth                CodeLen  `protobuf:"varint,4,opt,name=lenth,proto3,enum=cdkey.api.rpc.v1.CodeLen" json:"lenth,omitempty"`
	State                BagState `protobuf:"varint,5,opt,name=state,proto3,enum=cdkey.api.rpc.v1.BagState" json:"state,omitempty"`
	Batch                int32    `protobuf:"varint,6,opt,name=batch,proto3" json:"batch,omitempty"`
	Used                 int32    `protobuf:"varint,7,opt,name=used,proto3" json:"used,omitempty"`
	Total                int32    `protobuf:"varint,8,opt,name=total,proto3" json:"total,omitempty"`
	StartTime            int32    `protobuf:"varint,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int32    `protobuf:"varint,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Version              int32    `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiftGag) Reset()         { *m = GiftGag{} }
func (m *GiftGag) String() string { return proto.CompactTextString(m) }
func (*GiftGag) ProtoMessage()    {}
func (*GiftGag) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c07203a33ae7775, []int{0}
}
func (m *GiftGag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiftGag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiftGag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiftGag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiftGag.Merge(m, src)
}
func (m *GiftGag) XXX_Size() int {
	return m.Size()
}
func (m *GiftGag) XXX_DiscardUnknown() {
	xxx_messageInfo_GiftGag.DiscardUnknown(m)
}

var xxx_messageInfo_GiftGag proto.InternalMessageInfo

func (m *GiftGag) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GiftGag) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *GiftGag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GiftGag) GetLenth() CodeLen {
	if m != nil {
		return m.Lenth
	}
	return CodeLen_AllType
}

func (m *GiftGag) GetState() BagState {
	if m != nil {
		return m.State
	}
	return BagState_Working
}

func (m *GiftGag) GetBatch() int32 {
	if m != nil {
		return m.Batch
	}
	return 0
}

func (m *GiftGag) GetUsed() int32 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *GiftGag) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GiftGag) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GiftGag) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *GiftGag) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterEnum("cdkey.api.rpc.v1.CodeLen", CodeLen_name, CodeLen_value)
	proto.RegisterEnum("cdkey.api.rpc.v1.BagState", BagState_name, BagState_value)
	proto.RegisterType((*GiftGag)(nil), "cdkey.api.rpc.v1.GiftGag")
}

func init() { proto.RegisterFile("api/proto/giftbag.proto", fileDescriptor_9c07203a33ae7775) }

var fileDescriptor_9c07203a33ae7775 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xc1, 0xaa, 0xda, 0x40,
	0x14, 0x86, 0x9d, 0xd4, 0x98, 0xe4, 0xd8, 0x4a, 0x18, 0x0a, 0x1d, 0x0b, 0x06, 0xe9, 0x4a, 0x5c,
	0x24, 0xb5, 0x2e, 0xba, 0xae, 0x5d, 0xb8, 0x91, 0x52, 0xa2, 0x50, 0xe8, 0xa6, 0x8c, 0x99, 0x31,
	0x0e, 0x26, 0x33, 0x61, 0x32, 0x0a, 0xbe, 0x49, 0x1f, 0xa5, 0x8f, 0xd0, 0x65, 0x1f, 0xa1, 0x78,
	0x5f, 0xe4, 0x32, 0x13, 0xef, 0xe6, 0xde, 0xdd, 0xf9, 0xff, 0xef, 0xff, 0x99, 0x39, 0x1c, 0x78,
	0x47, 0x1b, 0x91, 0x35, 0x5a, 0x19, 0x95, 0x95, 0xe2, 0x60, 0xf6, 0xb4, 0x4c, 0x9d, 0xc2, 0x71,
	0xc1, 0x4e, 0xfc, 0x9a, 0xd2, 0x46, 0xa4, 0xba, 0x29, 0xd2, 0xcb, 0xe2, 0xc3, 0x1f, 0x0f, 0x82,
	0xb5, 0x38, 0x98, 0x35, 0x2d, 0xf1, 0x08, 0x3c, 0xc1, 0x08, 0x9a, 0xa2, 0x99, 0x9f, 0x7b, 0x82,
	0x61, 0x0c, 0xfd, 0x42, 0x31, 0x4e, 0xbc, 0x29, 0x9a, 0x45, 0xb9, 0x9b, 0xad, 0x27, 0x69, 0xcd,
	0xc9, 0xab, 0xce, 0xb3, 0x33, 0xce, 0xc0, 0xaf, 0xb8, 0x34, 0x47, 0xd2, 0x9f, 0xa2, 0xd9, 0xe8,
	0xd3, 0x38, 0x7d, 0xfe, 0x4a, 0xfa, 0x55, 0x31, 0xbe, 0xe1, 0x32, 0xef, 0x72, 0xf8, 0x23, 0xf8,
	0xad, 0xa1, 0x86, 0x13, 0xdf, 0x15, 0xde, 0xbf, 0x2c, 0xac, 0x68, 0xb9, 0xb5, 0x89, 0xbc, 0x0b,
	0xe2, 0xb7, 0xe0, 0xef, 0xa9, 0x29, 0x8e, 0x64, 0xe0, 0x7e, 0xd7, 0x09, 0xfb, 0x99, 0x73, 0xcb,
	0x19, 0x09, 0x9c, 0xe9, 0x66, 0x9b, 0x34, 0xca, 0xd0, 0x8a, 0x84, 0x5d, 0xd2, 0x09, 0x3c, 0x01,
	0x68, 0x0d, 0xd5, 0xe6, 0x97, 0x11, 0x35, 0x27, 0x91, 0x43, 0x91, 0x73, 0x76, 0xa2, 0xe6, 0x78,
	0x0c, 0x21, 0x97, 0xac, 0x83, 0xe0, 0x60, 0xc0, 0x25, 0x73, 0x88, 0x40, 0x70, 0xe1, 0xba, 0x15,
	0x4a, 0x92, 0x61, 0x47, 0xee, 0x72, 0xfe, 0x19, 0x82, 0xfb, 0x5e, 0x78, 0x08, 0xc1, 0x97, 0xaa,
	0xda, 0x5d, 0x1b, 0x1e, 0xf7, 0x70, 0x04, 0xfe, 0xf6, 0xa8, 0xb4, 0x89, 0x43, 0x0c, 0x30, 0xf8,
	0xa6, 0x74, 0x4d, 0xab, 0x18, 0x70, 0x08, 0xfd, 0x8d, 0x92, 0x65, 0xfc, 0x7a, 0xbe, 0x84, 0xf0,
	0x69, 0x3f, 0xdb, 0xfc, 0xa1, 0xf4, 0x49, 0xc8, 0x32, 0xee, 0xe1, 0x37, 0x10, 0x7d, 0xd7, 0x8a,
	0x9d, 0x0b, 0x2b, 0x91, 0x65, 0x5b, 0xa3, 0x1a, 0x2b, 0xbc, 0xd5, 0xe4, 0xef, 0x2d, 0x41, 0xff,
	0x6e, 0x09, 0xfa, 0x7f, 0x4b, 0xd0, 0xef, 0x87, 0xa4, 0xf7, 0x73, 0x68, 0xaf, 0x5c, 0xea, 0xa6,
	0xc8, 0x2e, 0x8b, 0xfd, 0xc0, 0x1d, 0x78, 0xf9, 0x18, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x04, 0x69,
	0x73, 0xfb, 0x01, 0x00, 0x00,
}

func (m *GiftGag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftGag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiftGag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Version != 0 {
		i = encodeVarintGiftbag(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x58
	}
	if m.EndTime != 0 {
		i = encodeVarintGiftbag(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x50
	}
	if m.StartTime != 0 {
		i = encodeVarintGiftbag(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x48
	}
	if m.Total != 0 {
		i = encodeVarintGiftbag(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x40
	}
	if m.Used != 0 {
		i = encodeVarintGiftbag(dAtA, i, uint64(m.Used))
		i--
		dAtA[i] = 0x38
	}
	if m.Batch != 0 {
		i = encodeVarintGiftbag(dAtA, i, uint64(m.Batch))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintGiftbag(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.Lenth != 0 {
		i = encodeVarintGiftbag(dAtA, i, uint64(m.Lenth))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGiftbag(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintGiftbag(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGiftbag(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGiftbag(dAtA []byte, offset int, v uint64) int {
	offset -= sovGiftbag(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GiftGag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGiftbag(uint64(m.Id))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovGiftbag(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGiftbag(uint64(l))
	}
	if m.Lenth != 0 {
		n += 1 + sovGiftbag(uint64(m.Lenth))
	}
	if m.State != 0 {
		n += 1 + sovGiftbag(uint64(m.State))
	}
	if m.Batch != 0 {
		n += 1 + sovGiftbag(uint64(m.Batch))
	}
	if m.Used != 0 {
		n += 1 + sovGiftbag(uint64(m.Used))
	}
	if m.Total != 0 {
		n += 1 + sovGiftbag(uint64(m.Total))
	}
	if m.StartTime != 0 {
		n += 1 + sovGiftbag(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovGiftbag(uint64(m.EndTime))
	}
	if m.Version != 0 {
		n += 1 + sovGiftbag(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGiftbag(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGiftbag(x uint64) (n int) {
	return sovGiftbag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GiftGag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGiftbag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftGag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftGag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGiftbag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGiftbag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGiftbag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGiftbag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lenth", wireType)
			}
			m.Lenth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lenth |= CodeLen(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= BagState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			m.Batch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Batch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			m.Used = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Used |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGiftbag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGiftbag
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGiftbag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGiftbag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGiftbag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGiftbag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGiftbag
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGiftbag
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGiftbag
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGiftbag        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGiftbag          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGiftbag = fmt.Errorf("proto: unexpected end of group")
)
